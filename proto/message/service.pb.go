// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.15.2
// source: message/service.proto

package message

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

var File_message_service_proto protoreflect.FileDescriptor

var file_message_service_proto_rawDesc = []byte{
	0x0a, 0x15, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x1a, 0x15, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0x46, 0x0a, 0x07, 0x53, 0x65, 0x6e, 0x64, 0x53,
	0x72, 0x76, 0x12, 0x3b, 0x0a, 0x04, 0x53, 0x65, 0x6e, 0x64, 0x12, 0x17, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x6e, 0x64,
	0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x32,
	0x46, 0x0a, 0x07, 0x52, 0x65, 0x63, 0x76, 0x53, 0x72, 0x76, 0x12, 0x3b, 0x0a, 0x04, 0x52, 0x65,
	0x63, 0x76, 0x12, 0x17, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x63, 0x76, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x63,
	0x76, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x42, 0x15, 0x5a, 0x13, 0x72, 0x6f, 0x6f, 0x6d, 0x78,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_message_service_proto_goTypes = []interface{}{
	(*MessageSendReq)(nil),  // 0: message.MessageSendReq
	(*MessageRecvReq)(nil),  // 1: message.MessageRecvReq
	(*MessageSendResp)(nil), // 2: message.MessageSendResp
	(*MessageRecvResp)(nil), // 3: message.MessageRecvResp
}
var file_message_service_proto_depIdxs = []int32{
	0, // 0: message.SendSrv.Send:input_type -> message.MessageSendReq
	1, // 1: message.RecvSrv.Recv:input_type -> message.MessageRecvReq
	2, // 2: message.SendSrv.Send:output_type -> message.MessageSendResp
	3, // 3: message.RecvSrv.Recv:output_type -> message.MessageRecvResp
	2, // [2:4] is the sub-list for method output_type
	0, // [0:2] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_message_service_proto_init() }
func file_message_service_proto_init() {
	if File_message_service_proto != nil {
		return
	}
	file_message_message_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_message_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_message_service_proto_goTypes,
		DependencyIndexes: file_message_service_proto_depIdxs,
	}.Build()
	File_message_service_proto = out.File
	file_message_service_proto_rawDesc = nil
	file_message_service_proto_goTypes = nil
	file_message_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SendSrvClient is the client API for SendSrv service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SendSrvClient interface {
	Send(ctx context.Context, in *MessageSendReq, opts ...grpc.CallOption) (*MessageSendResp, error)
}

type sendSrvClient struct {
	cc grpc.ClientConnInterface
}

func NewSendSrvClient(cc grpc.ClientConnInterface) SendSrvClient {
	return &sendSrvClient{cc}
}

func (c *sendSrvClient) Send(ctx context.Context, in *MessageSendReq, opts ...grpc.CallOption) (*MessageSendResp, error) {
	out := new(MessageSendResp)
	err := c.cc.Invoke(ctx, "/message.SendSrv/Send", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SendSrvServer is the server API for SendSrv service.
type SendSrvServer interface {
	Send(context.Context, *MessageSendReq) (*MessageSendResp, error)
}

// UnimplementedSendSrvServer can be embedded to have forward compatible implementations.
type UnimplementedSendSrvServer struct {
}

func (*UnimplementedSendSrvServer) Send(context.Context, *MessageSendReq) (*MessageSendResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send not implemented")
}

func RegisterSendSrvServer(s *grpc.Server, srv SendSrvServer) {
	s.RegisterService(&_SendSrv_serviceDesc, srv)
}

func _SendSrv_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageSendReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendSrvServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/message.SendSrv/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendSrvServer).Send(ctx, req.(*MessageSendReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _SendSrv_serviceDesc = grpc.ServiceDesc{
	ServiceName: "message.SendSrv",
	HandlerType: (*SendSrvServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Send",
			Handler:    _SendSrv_Send_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "message/service.proto",
}

// RecvSrvClient is the client API for RecvSrv service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RecvSrvClient interface {
	Recv(ctx context.Context, in *MessageRecvReq, opts ...grpc.CallOption) (*MessageRecvResp, error)
}

type recvSrvClient struct {
	cc grpc.ClientConnInterface
}

func NewRecvSrvClient(cc grpc.ClientConnInterface) RecvSrvClient {
	return &recvSrvClient{cc}
}

func (c *recvSrvClient) Recv(ctx context.Context, in *MessageRecvReq, opts ...grpc.CallOption) (*MessageRecvResp, error) {
	out := new(MessageRecvResp)
	err := c.cc.Invoke(ctx, "/message.RecvSrv/Recv", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RecvSrvServer is the server API for RecvSrv service.
type RecvSrvServer interface {
	Recv(context.Context, *MessageRecvReq) (*MessageRecvResp, error)
}

// UnimplementedRecvSrvServer can be embedded to have forward compatible implementations.
type UnimplementedRecvSrvServer struct {
}

func (*UnimplementedRecvSrvServer) Recv(context.Context, *MessageRecvReq) (*MessageRecvResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Recv not implemented")
}

func RegisterRecvSrvServer(s *grpc.Server, srv RecvSrvServer) {
	s.RegisterService(&_RecvSrv_serviceDesc, srv)
}

func _RecvSrv_Recv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageRecvReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecvSrvServer).Recv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/message.RecvSrv/Recv",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecvSrvServer).Recv(ctx, req.(*MessageRecvReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _RecvSrv_serviceDesc = grpc.ServiceDesc{
	ServiceName: "message.RecvSrv",
	HandlerType: (*RecvSrvServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Recv",
			Handler:    _RecvSrv_Recv_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "message/service.proto",
}
